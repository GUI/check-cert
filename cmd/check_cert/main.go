// Copyright 2020 Adam Chalkley
//
// https://github.com/atc0005/check-cert
//
// Licensed under the MIT License. See LICENSE file in the project root for
// full license information.

package main

import (
	"crypto/x509"
	"errors"
	"fmt"
	"os"
	"time"

	"github.com/rs/zerolog"

	"github.com/atc0005/check-cert/internal/certs"
	"github.com/atc0005/check-cert/internal/config"
	"github.com/atc0005/check-cert/internal/netutils"
	"github.com/atc0005/go-nagios"
)

func main() {

	// Start the timer. We'll use this to emit the plugin runtime as a
	// performance data metric.
	pluginStart := time.Now()

	// Set initial "state" as valid, adjust as we go.
	var nagiosExitState = nagios.ExitState{
		LastError:      nil,
		ExitStatusCode: nagios.StateOKExitCode,
	}

	// Override default section headers with our custom values.
	nagiosExitState.SetErrorsLabel("VALIDATION ERRORS")
	nagiosExitState.SetDetailedInfoLabel("VALIDATION CHECKS REPORT")

	// defer this from the start so it is the last deferred function to run
	defer nagiosExitState.ReturnCheckResults()

	// Setup configuration by parsing user-provided flags.
	cfg, cfgErr := config.New(config.AppType{Plugin: true})
	switch {
	case errors.Is(cfgErr, config.ErrVersionRequested):
		fmt.Println(config.Version())

		return

	case cfgErr != nil:

		// We make some assumptions when setting up our logger as we do not
		// have a working configuration based on sysadmin-specified choices.
		consoleWriter := zerolog.ConsoleWriter{Out: os.Stderr}
		logger := zerolog.New(consoleWriter).With().Timestamp().Caller().Logger()

		logger.Err(cfgErr).Msg("Error initializing application")

		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: Error initializing application",
			nagios.StateCRITICALLabel,
		)
		nagiosExitState.AddError(cfgErr)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

		return
	}

	// Collect last minute details just before ending plugin execution.
	defer func(exitState *nagios.ExitState, start time.Time, logger zerolog.Logger) {

		// Record plugin runtime, emit this metric regardless of exit
		// point/cause.
		runtimeMetric := nagios.PerformanceData{
			Label: "time",
			Value: fmt.Sprintf("%dms", time.Since(start).Milliseconds()),
		}
		if err := exitState.AddPerfData(false, runtimeMetric); err != nil {
			logger.Error().
				Err(err).
				Msg("failed to add time (runtime) performance data metric")
		}

		// Annotate errors (if applicable) with additional context to aid in
		// troubleshooting.
		nagiosExitState.Errors = annotateError(logger, nagiosExitState.Errors...)
	}(&nagiosExitState, pluginStart, cfg.Log)

	if cfg.EmitBranding {
		// If enabled, show application details at end of notification
		nagiosExitState.BrandingCallback = config.Branding("Notification generated by ")
	}

	log := cfg.Log.With().
		Str("expected_sans_entries", cfg.SANsEntries.String()).
		Logger()

	var certChain []*x509.Certificate

	var certChainSource string

	// Honor request to parse filename first
	switch {
	case cfg.Filename != "":

		log.Debug().Msg("Attempting to parse certificate file")

		// Anything from the specified file that couldn't be converted to a
		// certificate chain. While likely not of high value by itself,
		// failure to parse a certificate file indicates a likely source of
		// trouble. We consider this scenario to be a CRITICAL state.
		var parseAttemptLeftovers []byte

		var err error
		certChain, parseAttemptLeftovers, err = certs.GetCertsFromFile(cfg.Filename)
		if err != nil {
			log.Error().Err(err).Msg(
				"Error parsing certificates file")

			nagiosExitState.AddError(err)
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: Error parsing certificates file %q",
				nagios.StateCRITICALLabel,
				cfg.Filename,
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			return
		}

		certChainSource = cfg.Filename

		log.Debug().Msg("Certificate file parsed")

		if len(parseAttemptLeftovers) > 0 {
			log.Error().Err(err).Msg(
				"Unknown data encountered while parsing certificates file")

			nagiosExitState.AddError(fmt.Errorf(
				"%d unknown/unparsed bytes remaining at end of cert file %q",
				len(parseAttemptLeftovers),
				cfg.Filename,
			))
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: Unknown data encountered while parsing certificates file %q",
				nagios.StateCRITICALLabel,
				cfg.Filename,
			)

			nagiosExitState.LongServiceOutput = fmt.Sprintf(
				"The following text from the %q certificate file failed to parse"+
					" and is provided here for troubleshooting purposes:%s%s%s",
				cfg.Filename,
				nagios.CheckOutputEOL,
				nagios.CheckOutputEOL,
				string(parseAttemptLeftovers),
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			return
		}

	case cfg.Server != "":

		log.Debug().Msg("Expanding given host pattern in order to obtain IP Address")
		expandedHost, expandErr := netutils.ExpandHost(cfg.Server)
		switch {
		case expandErr != nil:
			log.Error().Err(expandErr).Msg(
				"Error expanding given host pattern")

			nagiosExitState.AddError(expandErr)
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: Error expanding given host pattern %q to target IP Address",
				nagios.StateCRITICALLabel,
				cfg.Server,
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			// no need to go any further, we *want* to exit right away; we don't
			// have a connection to the remote server and there isn't anything
			// further we can do
			return

		// Fail early for IP Ranges. While we could just grab the first
		// expanded IP Address, this may be a potential source of confusion
		// best avoided.
		case expandedHost.Range:
			invalidHostPatternErr := errors.New("invalid host pattern")
			msg := fmt.Sprintf(
				"Given host pattern invalid; " +
					"host pattern is a CIDR or partial IP range",
			)
			log.Error().Err(invalidHostPatternErr).Msg(msg)

			nagiosExitState.AddError(invalidHostPatternErr)
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: %s",
				nagios.StateCRITICALLabel,
				msg,
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			// no need to go any further, we *want* to exit right away; we don't
			// have a connection to the remote server and there isn't anything
			// further we can do
			return

		case len(expandedHost.Expanded) == 0:
			expandHostErr := errors.New("host pattern expansion failed")
			msg := "Error expanding given host value to IP Address"

			log.Error().Err(expandHostErr).Msg(msg)

			nagiosExitState.AddError(expandHostErr)
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: %s",
				nagios.StateCRITICALLabel,
				msg,
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			// no need to go any further, we *want* to exit right away; we don't
			// have a connection to the remote server and there isn't anything
			// further we can do
			return

		case len(expandedHost.Expanded) > 1:

			ipAddrs := zerolog.Arr()
			for _, ip := range expandedHost.Expanded {
				ipAddrs.Str(ip)
			}

			log.Debug().
				Int("num_ip_addresses", len(expandedHost.Expanded)).
				Array("ip_addresses", ipAddrs).
				Msg("Multiple IP Addresses resolved from given host pattern")
			log.Debug().Msg("Using first IP Address, ignoring others")
		}

		// Grab first IP Address from the resolved collection. We'll
		// explicitly use it for cert retrieval and note it in the report
		// output.
		ipAddr := expandedHost.Expanded[0]

		// Server Name Indication (SNI) support is used to request a specific
		// certificate chain from a remote server.
		//
		// We use the value specified by the `server` flag to open a
		// connection to the remote server. If available, we use the DNS Name
		// value specified by the DNA Name flag as our host value, otherwise
		// we fallback to using the value specified by the server flag as our
		// host value.
		//
		// For a service with only one certificate chain the host value is
		// less important, but for a host with multiple certificate chains
		// having the correct host value is crucial.
		var hostVal string
		switch {

		// We have a resolved IP Address and a sysadmin-specified DNS Name
		// value to use for a SNI-enabled certificate retrieval attempt.
		case expandedHost.Resolved && cfg.DNSName != "":
			hostVal = cfg.DNSName
			certChainSource = fmt.Sprintf(
				"service running on %s (%s) at port %d using host value %q",
				expandedHost.Given,
				ipAddr,
				cfg.Port,
				hostVal,
			)

		// We have a resolved IP Address, but not a sysadmin-specified DNS
		// Name value. We'll use the resolvable name/FQDN for a SNI-enabled
		// certificate retrieval attempt.
		case expandedHost.Resolved && cfg.DNSName == "":
			hostVal = expandedHost.Given
			certChainSource = fmt.Sprintf(
				"service running on %s (%s) at port %d using host value %q",
				expandedHost.Given,
				ipAddr,
				cfg.Port,
				expandedHost.Given,
			)
		default:
			certChainSource = fmt.Sprintf(
				"service running on %s at port %d",
				ipAddr,
				cfg.Port,
			)
		}

		log.Debug().
			Str("server", cfg.Server).
			Str("dns_name", cfg.DNSName).
			Str("ip_address", ipAddr).
			Str("host_value", hostVal).
			Int("port", cfg.Port).
			Msg("Retrieving certificate chain")
		var certFetchErr error
		certChain, certFetchErr = netutils.GetCerts(
			hostVal,
			ipAddr,
			cfg.Port,
			cfg.Timeout(),
			log,
		)
		if certFetchErr != nil {
			log.Error().Err(certFetchErr).Msg(
				"Error fetching certificates chain")

			nagiosExitState.AddError(certFetchErr)
			nagiosExitState.ServiceOutput = fmt.Sprintf(
				"%s: Error fetching certificates from port %d on %s",
				nagios.StateCRITICALLabel,
				cfg.Port,
				cfg.Server,
			)
			nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode

			// no need to go any further, we *want* to exit right away; we don't
			// have a connection to the remote server and there isn't anything
			// further we can do
			return

		}

	}

	// NOTE: Not sure this would ever be reached due to:
	//
	// - expectations of tls.Dial() that a certificate is present for the
	//   connection
	//
	// - file-based certificate retrieval asserting that at last one cert was
	//   retrieved
	//
	// but we check anyway to rule out the possibility.
	if len(certChain) == 0 {
		noCertsErr := fmt.Errorf("no certificates found")
		nagiosExitState.AddError(noCertsErr)
		nagiosExitState.ServiceOutput = fmt.Sprintf(
			"%s: 0 certificates found at port %d on %q",
			nagios.StateCRITICALLabel,
			cfg.Port,
			cfg.Server,
		)
		nagiosExitState.ExitStatusCode = nagios.StateCRITICALExitCode
		log.Error().Err(noCertsErr).Msg("No certificates found")

		return
	}

	// Prepend a baseline lead-in that summarizes the number of certificates
	// retrieved and from which target host/IP Address.
	defer func() {
		// If a certificate chain was pulled from a file, we "found" it, if it
		// was pulled from a server we "retrieved" it.
		//
		// TODO: Alternatively, we could use the world "evaluated" to cover
		// both cases?
		var template string
		switch {
		case cfg.Filename != "":
			template = "%d certs found in %s%s%s"
		default:
			template = "%d certs retrieved for %s%s%s"
		}

		nagiosExitState.LongServiceOutput = fmt.Sprintf(
			template,
			len(certChain),
			certChainSource,
			nagios.CheckOutputEOL,
			nagiosExitState.LongServiceOutput,
		)
	}()

	validationResults := runValidationChecks(cfg, certChain, log)

	// validationResults.Sort()
	for _, item := range validationResults {
		log.Debug().Msgf(
			"Name: %s, Priority: %d\n",
			item.CheckName(),
			item.Priority(),
		)
	}

	switch {
	case validationResults.HasFailed():

		if cfg.ListIgnoredValidationCheckResultErrors {
			nagiosExitState.AddError(validationResults.Errs(true)...)
		} else {
			nagiosExitState.AddError(validationResults.Errs(false)...)
		}

		nagiosExitState.ServiceOutput = validationResults.OneLineSummary()
		nagiosExitState.LongServiceOutput = validationResults.Report(cfg.VerboseOutput)

		nagiosExitState.ExitStatusCode = validationResults.ServiceState().ExitCode

		log.Error().
			Err(validationResults.Err()).
			Int("checks_total", validationResults.Total()).
			Int("checks_failed", validationResults.NumFailed()).
			Int("checks_ignored", validationResults.NumIgnored()).
			Int("checks_successful", validationResults.NumSucceeded()).
			Msg("validation checks failed for certificate chain")

	default:

		nagiosExitState.ServiceOutput = validationResults.OneLineSummary()
		nagiosExitState.LongServiceOutput = validationResults.Report(cfg.VerboseOutput)

		nagiosExitState.ExitStatusCode = nagios.StateOKExitCode
		log.Debug().
			Int("checks_total", validationResults.Total()).
			Int("checks_failed", validationResults.NumFailed()).
			Int("checks_ignored", validationResults.NumIgnored()).
			Int("checks_successful", validationResults.NumSucceeded()).
			Msg("No (non-ignored) problems with certificate chain detected")

	}

}
